#!/usr/bin/env bash
# This is an init-style script to manage the 'manage_my_process' daemon.

# Define variables for the daemon script and its PID file
DAEMON_SCRIPT="./manage_my_process"
PID_FILE="/var/run/my_process.pid"

# Function to start the daemon
start_process() {
    # Check if PID file exists, indicating a potentially running process
    if [ -f "$PID_FILE" ]; then
        if kill -0 "$(cat "$PID_FILE")" > /dev/null 2>&1; then
            echo "manage_my_process is already running with PID $(cat "$PID_FILE")."
            exit 0 # Exit successfully as it's already running
        else
            # PID file exists but process is not running, clean up old PID file
            echo "Stale PID file found, cleaning up."
            rm -f "$PID_FILE"
        fi
    fi

    # Start the daemon in the background using nohup to detach it from the terminal.
    # $! expands to the PID of the last backgrounded command.
    nohup "$DAEMON_SCRIPT" &
    echo $! > "$PID_FILE"
    echo "manage_my_process started"
}

# Function to stop the daemon
stop_process() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if kill "$PID" > /dev/null 2>&1; then
            echo "Stopping manage_my_process with PID $PID..."
            # Wait for the process to terminate.
            # You might want a timeout here in a real-world script.
            while kill -0 "$PID" > /dev/null 2>&1; do
                sleep 0.5
            done
            rm -f "$PID_FILE"
            echo "manage_my_process stopped"
        else
            echo "manage_my_process is not running (or PID $PID is invalid)."
            rm -f "$PID_FILE" # Clean up potentially stale PID file
        fi
    else
        echo "manage_my_process is not running (PID file not found)."
    fi
}

# Main script logic based on argument
case "$1" in
    start)
        start_process
        ;;
    stop)
        stop_process
        ;;
    restart)
        stop_process
        start_process
        echo "manage_my_process restarted" # This message is already inside start_process.
                                         # The requirement says "Displays manage_my_process restarted"
                                         # so we add it here explicitly.
        ;;
    *)
        echo "Usage: $(basename "$0") {start|stop|restart}"
        exit 1
        ;;
esac

exit 0 
